import {databases, db} from './appwrite';
import { UserSchema, StorySchema, StoryNodeSchema } from '../src/schemas'
import type { User, Story, StoryNode } from "../types/"

import {ID, Query } from 'react-native-appwrite'

// Service class wrapping all database operations
export class DatabaseService{
    async createUser(UserData: Omit<User, 'user_id' | 'created_at'>): Promise <User>{
        try{
            // Add autogenerated fields
            const validatedData = UserSchema.parse({
                ...UserData,
                user_id: ID.unique(),
                created_at: new Date(),
            })
            // Insert into Appwrite Users collection
            const user = await databases.createDocument(
                db.databaseId,
                db.collections.USERS,
                validatedData.user_id,
                validatedData,
            )
        }catch(error: any){
            throw new Error(`Failed to create user: ${error.message}`);
        }
    }
    async getUserById(userId: string): Promise<User | null> {
        try {
          const response = await databases.getDocument(
            db.databaseId,
            db.collections.USERS,
            userId
          );
          return UserSchema.parse(response);
        } catch (error: any) {
          if (error.code === 404) return null;
          throw new Error(`Failed to get user: ${error.message}`);
        }
      }

      async createStory(
        storyData: Omit<Story, "story_id" | "created_at">
      ): Promise<Story> {
        try {
          const validatedData = StorySchema.parse({
            ...storyData,
            story_id: ID.unique(),
            created_at: new Date(),
          });
    
          const response = await databases.createDocument(
            db.databaseId,
            db.collections.STORIES,
            validatedData.story_id,
            validatedData
          );
    
          return StorySchema.parse(response);
        } catch (error: any) {
          throw new Error(`Failed to create story: ${error.message}`);
        }
      }
      async getActiveStoriesByUser(userId: string): Promise<Story[]> {
        try {
          const response = await databases.listDocuments(
            db.databaseId,
            db.collections.STORIES,
            [
              Query.equal("user_id", userId),
              Query.equal("status", "active"),
            ]
          );
    
          return response.documents.map((doc) => StorySchema.parse(doc));
        } catch (error: any) {
          throw new Error(`Failed to get active stories: ${error.message}`);
        }
      }
}
// Export a single shared instance of the service
export const databaseService = new DatabaseService();